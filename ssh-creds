#!/usr/bin/env bash
# SSH MCP Credential Helper
# This tool runs outside of Claude to securely store credentials

set -e

CREDS_DIR="$HOME/.ssh-mcp/credentials"
mkdir -p "$CREDS_DIR"
chmod 700 "$CREDS_DIR"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

function generate_id() {
    # Generate a random reference ID
    echo "ref_$(openssl rand -hex 16)"
}

function store_credential() {
    echo -e "${GREEN}SSH MCP Credential Store${NC}"
    echo "========================"
    
    # Get description
    read -p "Enter description: " description
    
    # Get credential type
    echo -e "\nCredential type:"
    echo "1) Password"
    echo "2) Private Key Path"
    echo "3) Private Key Content"
    read -p "Select (1-3): " cred_type
    
    case $cred_type in
        1)
            type="password"
            read -p "Enter username: " username
            read -s -p "Enter password: " credential
            echo
            ;;
        2)
            type="keypath"
            read -p "Enter username: " username
            read -p "Enter private key path: " credential
            # Verify file exists
            if [ ! -f "$credential" ]; then
                echo -e "${RED}Error: File not found: $credential${NC}"
                exit 1
            fi
            ;;
        3)
            type="keyfile"
            read -p "Enter username: " username
            echo "Paste private key content (press Ctrl+D when done):"
            credential=$(cat)
            ;;
        *)
            echo -e "${RED}Invalid selection${NC}"
            exit 1
            ;;
    esac
    
    # Generate reference ID
    ref_id=$(generate_id)
    
    # Store credential
    cred_file="$CREDS_DIR/$ref_id.json"
    
    # Create credential JSON
    cat > "$cred_file" <<EOF
{
    "id": "$ref_id",
    "type": "$type",
    "username": "$username",
    "credential": "$credential",
    "description": "$description",
    "created": "$(date -u +"%Y-%m-%dT%H:%M:%SZ")"
}
EOF
    
    chmod 600 "$cred_file"
    
    echo -e "\n${GREEN}✓ Credential stored successfully!${NC}"
    echo -e "${YELLOW}Reference ID: $ref_id${NC}"
    echo -e "\nUse this reference ID in Claude with ssh_connect:"
    echo "- username: $username"
    echo "- credentialRef: $ref_id"
}

function list_credentials() {
    echo -e "${GREEN}Stored Credentials${NC}"
    echo "=================="
    
    if [ ! -d "$CREDS_DIR" ] || [ -z "$(ls -A "$CREDS_DIR" 2>/dev/null)" ]; then
        echo "No credentials stored."
        return
    fi
    
    for cred_file in "$CREDS_DIR"/*.json; do
        if [ -f "$cred_file" ]; then
            # Parse JSON manually for compatibility
            ref_id=$(grep '"id"' "$cred_file" | cut -d'"' -f4)
            type=$(grep '"type"' "$cred_file" | cut -d'"' -f4)
            username=$(grep '"username"' "$cred_file" | cut -d'"' -f4)
            description=$(grep '"description"' "$cred_file" | cut -d'"' -f4)
            created=$(grep '"created"' "$cred_file" | cut -d'"' -f4)
            
            echo -e "\nID: ${YELLOW}$ref_id${NC}"
            echo "  Type: $type"
            echo "  Username: $username"
            echo "  Description: $description"
            echo "  Created: $created"
        fi
    done
}

function delete_credential() {
    read -p "Enter reference ID to delete: " ref_id
    
    cred_file="$CREDS_DIR/$ref_id.json"
    
    if [ ! -f "$cred_file" ]; then
        echo -e "${RED}Error: Credential not found: $ref_id${NC}"
        exit 1
    fi
    
    # Show credential details before deletion
    description=$(grep '"description"' "$cred_file" | cut -d'"' -f4)
    echo -e "Delete credential: ${YELLOW}$description${NC}?"
    read -p "Confirm (y/N): " confirm
    
    if [ "$confirm" = "y" ] || [ "$confirm" = "Y" ]; then
        rm "$cred_file"
        echo -e "${GREEN}✓ Credential deleted${NC}"
    else
        echo "Cancelled"
    fi
}

function show_help() {
    echo "SSH MCP Credential Helper"
    echo ""
    echo "Usage: $0 [command]"
    echo ""
    echo "Commands:"
    echo "  store    Store a new credential"
    echo "  list     List all stored credentials"
    echo "  delete   Delete a credential"
    echo "  help     Show this help message"
    echo ""
    echo "This tool securely stores SSH credentials outside of Claude's context."
    echo "Credentials are stored in: $CREDS_DIR"
}

# Main command handling
case "${1:-help}" in
    store)
        store_credential
        ;;
    list)
        list_credentials
        ;;
    delete)
        delete_credential
        ;;
    help|--help|-h)
        show_help
        ;;
    *)
        echo -e "${RED}Unknown command: $1${NC}"
        show_help
        exit 1
        ;;
esac