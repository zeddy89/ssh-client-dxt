name: Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write

jobs:
  build:
    name: Build Release
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: ssh-client-mcp
            asset_name: ssh-client-mcp-linux-amd64
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            artifact_name: ssh-client-mcp
            asset_name: ssh-client-mcp-linux-arm64
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact_name: ssh-client-mcp
            asset_name: ssh-client-mcp-macos-amd64
          - os: macos-latest
            target: aarch64-apple-darwin
            artifact_name: ssh-client-mcp
            asset_name: ssh-client-mcp-macos-arm64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_name: ssh-client-mcp.exe
            asset_name: ssh-client-mcp-windows-amd64.exe
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Install build dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential cmake perl
    
    - name: Install build dependencies (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        # Install OpenSSL and pkg-config for linking
        brew install openssl@3 pkg-config
        echo "PKG_CONFIG_PATH=$(brew --prefix openssl@3)/lib/pkgconfig" >> $GITHUB_ENV
    
    - name: Install Rust
      uses: actions-rs/toolchain@v1
      with:
        profile: minimal
        toolchain: stable
        target: ${{ matrix.target }}
        override: true
    
    - name: Install cross-compilation tools
      if: matrix.os == 'ubuntu-latest' && matrix.target == 'aarch64-unknown-linux-gnu'
      run: |
        sudo apt-get update
        sudo apt-get install -y gcc-aarch64-linux-gnu
    
    - name: Install build tools (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        choco install strawberryperl -y
        echo "C:\strawberry\perl\bin" >> $env:GITHUB_PATH
    
    - name: Build
      run: cargo build --release --target ${{ matrix.target }}
      env:
        # For macOS, help the build find system libraries
        MACOSX_DEPLOYMENT_TARGET: ${{ matrix.os == 'macos-latest' && '10.15' || '' }}
        # For Windows, ensure static CRT linkage
        RUSTFLAGS: ${{ matrix.os == 'windows-latest' && '-C target-feature=+crt-static' || '' }}
        # For Linux, ensure static linking
        OPENSSL_STATIC: ${{ matrix.os == 'ubuntu-latest' && '1' || '' }}
    
    - name: Strip binary (Linux/macOS)
      if: matrix.os != 'windows-latest'
      run: strip target/${{ matrix.target }}/release/${{ matrix.artifact_name }}
    
    - name: Upload binary
      uses: actions/upload-artifact@v3
      with:
        name: ${{ matrix.asset_name }}
        path: target/${{ matrix.target }}/release/${{ matrix.artifact_name }}

  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Download artifacts
      uses: actions/download-artifact@v3
      with:
        path: ./artifacts
    
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: false
        prerelease: false
        body: |
          # SSH Client MCP Server ${{ github.ref }}
          
          ## Features
          - Zero credential exposure to Claude
          - Native performance with Rust
          - Cross-platform support
          
          ## Installation
          Download the appropriate binary for your platform and make it executable:
          
          ```bash
          chmod +x ssh-client-mcp-*
          ./ssh-client-mcp-*
          ```
    
    - name: Upload Release Assets
      run: |
        for asset in ./artifacts/*; do
          asset_name=$(basename "$asset")
          echo "Uploading $asset_name"
          gh release upload ${{ github.ref_name }} "$asset/$asset_name" --clobber
        done
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}